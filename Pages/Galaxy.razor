@page "/"

@inject IObservation Observation;
@inject INebula Nebula;
@inject IControl Control;

@if (_rocket!.RocketStatus is Rocket.Status.Lost)
{
   <StatusLost />
}
else if (_rocket!.RocketStatus is Rocket.Status.Win)
{
   <StatusWin />
}
else
{
     <div id="galaxy"
          class="galaxy-container">
          <Universe OnRocketMoving="OnRocketMoving"
                    BlackHoles="Litter"
                    Stars="Constellation"
                    Rocket="_rocket"></Universe>
          <ScoreCard Stars="Constellation"></ScoreCard>
     </div>
}
@code {
     private Models.Galaxy GalaxyScale { get; set; } = new();
     private List<Star>? Constellation { get; set; } = new();
     private List<BlackHole>? Litter { get; set; } = new();
     private Rocket _rocket { get; set; } = new();
     
     protected override async Task OnAfterRenderAsync(bool firstRender)
     {
          if (_rocket.RocketStatus is not Rocket.Status.Discovering)
               return;
          
          GalaxyScale = await Observation.GetUniverseScale();
          if (firstRender)
          {
               Litter = Nebula.BlackHoleBirth(GalaxyScale);
               Constellation = Nebula.StarBirth(GalaxyScale);

               _rocket!.Top = GalaxyScale.Height / 2;
               _rocket.Left = GalaxyScale.Width / 2;
               
               StateHasChanged();
          }
     }

     async Task OnRocketMoving(KeyboardEventArgs e)
     {
          await Control.MoveRocket(e, _rocket, GalaxyScale);

          Constellation = await Observation.DetectNewDiscovery(Constellation!, _rocket );
          Observation.DiscoveryStatus(_rocket!, Constellation);
          Control.MoveBlackHoles(Litter!, _rocket);
          await Observation.DetectBlackHoleCollision(Litter!, _rocket);
     }
}